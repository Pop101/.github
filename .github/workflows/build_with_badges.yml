name: "Code Scanning"

on:
  push:
    branches:
      - "*"
      - "!badges"
    paths-ignore:
      - "**/*.md"
      - "**/*.txt"
      - ".gitignore"
      - "LICENSE"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**/*.md"
      - "**/*.txt"
  schedule:
    #        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ minute (0 - 59)
    #        ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ hour (0 - 23)
    #        ‚îÇ  ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of the month (1 - 31)
    #        ‚îÇ  ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ month (1 - 12 or JAN-DEC)
    #        ‚îÇ  ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of the week (0 - 6 or SUN-SAT)
    #        ‚îÇ  ‚îÇ ‚îÇ ‚îÇ ‚îÇ
    #        ‚îÇ  ‚îÇ ‚îÇ ‚îÇ ‚îÇ
    #        ‚îÇ  ‚îÇ ‚îÇ ‚îÇ ‚îÇ
    #        *  * * * *
    - cron: "30 1 * * 0"

jobs:
  CodeQL:
    outputs:
      errors: ${{ steps.count.outputs.errors }}
      warnings: ${{ steps.count.outputs.warnings }}
      notes: ${{ steps.count.outputs.notes }}
    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest
    runs-on: ubuntu-latest

    permissions:
      # required for all workflows
      security-events: write

      # only required for workflows in private repositories
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        continue-on-error: true
        # Override language selection by uncommenting this and choosing your languages
        # with:
        #   languages: go, javascript, csharp, python, cpp, java

      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below).
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
        continue-on-error: true

      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö https://git.io/JvXDl

      # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following
      #    three lines and modify them (or add more) to build your code if your
      #    project uses a compiled language

      #- run: |
      #     make bootstrap
      #     make release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        continue-on-error: true
        with:
          add-snippets: true
          wait-for-processing: true

      # Count the errors
      - name: Detect Errors
        id: count

        if: ${{ success() }}

        shell: bash
        run: |
          declare repo=$(echo ${{ github.repository }} | awk -F'/' '{print $2}')
          declare results=$(cat /home/runner/work/**/*.sarif | jq -r '.runs[].results[].ruleId')
          declare resultsArray=($results)

          echo "${resultsArray[*]}"
          declare errorCount=0
          declare warningCount=0
          declare noteCount=0

          # TODO: see if we can count occurrences instead of using a for loop
          for var in "${resultsArray[@]}"
          do
            severity=$(cat /home/runner/work/**/*.sarif | jq -r '.runs[].tool.driver.rules[] | select(.id=="'$var'").properties."problem.severity"')
            echo "${var} | $severity"
            if [ "$severity" == "warning" ]; then let warningCount+=1; fi
            if [ "$severity" == "error" ]; then let errorount+=1; fi
            if [ "$severity" == "note" ]; then let noteount+=1; fi
          done

          echo ""
          echo "Error Count: $errorCount"
          echo "Warning Count: $warningCount"
          echo "Note Count: $noteCount"
          echo ""

          echo "##[set-output name=errors;]$errorCount"
          echo "##[set-output name=warnings;]$warningCount"
          echo "##[set-output name=notes;]$noteCount"

  Make:
    # A job to execute the current make file and count the number of warnings
    # and errors.

    outputs:
      warnings: ${{ steps.count.outputs.warnings }}
      errors: ${{ steps.count.outputs.errors }}

    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

  GitCounts:
    # A job to count several statistics
    # Counts:
    #   - commits
    #   - merges
    #   - branches
    #   - total lines of code
    #   - contributors
    #   - open issues
    name: "Git Statistics"

    outputs:
      commits: ${{ steps.commits.outputs.count }}
      merges: ${{ steps.commits.outputs.merges }}

      branches: ${{ steps.branches.outputs.branches }}
      contributors: ${{ steps.contributors.outputs.contrib }}
      lines: ${{ steps.lines.outputs.lines }}
      issues: ${{ steps.issues.outputs.count }}

      words: ${{ steps.words.outputs.words }}
      chars: ${{ steps.words.outputs.chars }}
      avg-word-length: ${{ steps.words.outputs.avg-word-length }}
      unique-words: ${{ steps.words.outputs.unique-words }}

    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Issue Count"
        id: issues
        uses: kazupon/issue-count-action@master
        with:
          github-token: ${{ github.token }}
          state: open

      - name: "Commit & Merge Count"
        id: commits
        shell: bash
        run: |
          declare COUNT_NO_MERGES=$(git rev-list --no-merges --count HEAD)
          declare COUNT_MERGES=$(git rev-list --count HEAD)
          declare MERGES=$(($COUNT_MERGES - $COUNT_NO_MERGES))

          echo "##[set-output name=count;]$COUNT_NO_MERGES"
          echo "##[set-output name=merges;]$MERGES"

      - name: "Commits this year"
        id: commits-year
        run: |
          declare YEAR=$(date +%Y)
          declare COUNT=$(git rev-list --count --since="$YEAR-01-01" HEAD)

          echo "##[set-output name=count;]$COUNT"

      - name: "Branch Count"
        id: branches
        run: |
          declare COUNT=$(git branch --list --no-color | wc -l)
          echo "##[set-output name=branches;]$COUNT"

      - name: "Contributor Count"
        id: contributors
        run: |
          git shortlog -s HEAD
          echo "##[set-output name=contrib;]$(git shortlog -s HEAD | wc -l)"

      - name: "Line Count"
        id: lines
        run: |
          echo "##[set-output name=lines;]$(git ls-files | xargs wc -l | awk '{print $1}' | paste -sd+ | bc)"

      - name: "Word Count"
        id: words
        run: |
          declare RAW_WORDS=$(tr '\n' ' ' | sed -E 's/[0-9]|[[:punct:]]/ /g; s/[[:space:]]+/ /g')
          declare WORDS=$(echo $RAW_WORDS | wc -w)
          declare CHARS=$(echo $RAW_WORDS | wc -c)

          declare AVG_WORD_LENGTH=$(( 100 * ($CHARS - $WORDS) / $WORDS ))

          declare UNIQUE_WORDS=$(echo $RAW_WORDS | tr ' ' '\n' | sort -u | wc -l)
          UNIQUE_WORDS=$(($UNIQUE_WORDS - 1))

          echo "##[set-output name=words;]$WORDS"
          echo "##[set-output name=chars;]$CHARS"
          echo "##[set-output name=avg-word-length;]$AVG_WORD_LENGTH"
          echo "##[set-output name=unique-words;]$UNIQUE_WORDS"

  GenBadges:
    # A job to generate badges for the current repository.
    # Badges are generated based on all the values calculated above:
    # - Number of commits
    # - Number of contributors
    # - Number of open issues
    # - Number of lines of code
    needs: [CodeQL, Make, GitCounts]
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      # If a task fails, we want to set the resulting variable to 0
      - name: "Defaults"
        id: defaults
        env:
          MK_WARNINGS: ${{ needs.Make.outputs.warnings }}
          MK_ERRORS: ${{ needs.Make.outputs.errors }}

          QL_NOTES: ${{ needs.CodeQL.outputs.notes }}
          QL_WARNINGS: ${{ needs.CodeQL.outputs.warnings }}
          QL_ERRORS: ${{ needs.CodeQL.outputs.errors }}

        run: |
          declare MK_WARNINGS=${MK_WARNINGS:-0}
          declare MK_ERRORS=${MK_ERRORS:-0}

          declare QL_NOTES=${QL_NOTES:-0}
          declare QL_WARNINGS=${QL_WARNINGS:-0}
          declare QL_ERRORS=${QL_ERRORS:-0}

          echo "##[set-output name=warnings;]$MK_WARNINGS"
          echo "##[set-output name=errors;]$MK_ERRORS"

          echo "##[set-output name=notes;]$QL_NOTES"
          echo "##[set-output name=warnings;]$QL_WARNINGS"
          echo "##[set-output name=errors;]$QL_ERRORS"

      - name: "Calculations"
        id: calcs
        env:
          LINES: ${{ needs.GitCounts.outputs.lines }}
          PR_ISSUES: ${{ needs.GitCounts.outputs.issues }}

          MK_WARNINGS: ${{ steps.defaults.outputs.warnings }}
          MK_ERRORS: ${{ steps.defaults.outputs.errors }}

          QL_NOTES: ${{ steps.defaults.outputs.notes }}
          QL_WARNINGS: ${{ steps.defaults.outputs.warnings }}
          QL_ERRORS: ${{ steps.defaults.outputs.errors }}

          UNIQUE_WORDS: ${{ steps.GitCounts.outputs.unique-words }}
          WORD_COUNT: ${{ steps.GitCounts.outputs.words }}

        run: |
          mkdir -p ./.github/badges

          declare LINES_PER_PR="‚àû"
          if [ $PR_ISSUES -gt 0 ] && [ $LINES -gt 0 ]; then
            LINES_PER_PR = $(($LINES / $PR_ISSUES))
          fi

          declare TOTAL_ERRORS=$(($QL_ERRORS + $MK_ERRORS))
          declare TOTAL_WARNINGS=$(($TOTAL_ERRORS + $MK_WARNINGS + $QL_WARNINGS))

          declare WARNS_PERCENT=0
          if [ $LINES -gt 0 ]; then
            WARNS_PER_LINE=$(( 100 * $TOTAL_WARNINGS / $LINES))
          fi

          declare CLEAN_PERCENT=100
          if [ $LINES -gt 0 ]; then
            CLEAN_PERCENT=$(( $LINES - $TOTAL_WARNINGS - $QL_NOTES ))
            CLEAN_PERCENT=$(( 100 * $CLEAN_PERCENT / $LINES ))
          fi

          declare DRY_SCORE=100
          if [ $LINES -gt 0 ]; then
            DRY_SCORE=$(( 100 * $UNIQUE_WORDS / $WORDS ))
          fi

          echo "##[set-output name=lines-per-pr;]$LINES_PER_PR"
          echo "##[set-output name=total-errors;]$TOTAL_ERRORS"
          echo "##[set-output name=total-warnings;]$TOTAL_WARNINGS"
          echo "##[set-output name=warnings-percent;]$WARNS_PERCENT"
          echo "##[set-output name=clean-percent;]$CLEAN_PERCENT"
          echo "##[set-output name=dry-score;]$DRY_SCORE"

      - name: "Generate Commit Badge"
        uses: emibcn/badge-action@v1
        with:
          label: "üó∏ Commits"
          status: ${{ needs.GitCounts.outputs.commits }}
          color: blue
          path: .github/badges/commit_count.svg

      - name: "Generate Contributor Badge"
        uses: emibcn/badge-action@v1
        with:
          label: "‚©Ü Contributors"
          status: ${{ needs.GitCounts.outputs.contributors }}
          color: green
          path: .github/badges/contributor_count.svg

      - name: "Generate Merges Badge"
        uses: emibcn/badge-action@v1
        with:
          label: "‚§û Merges"
          status: ${{ needs.GitCounts.outputs.merges }}
          color: blue
          path: .github/badges/merge_count.svg

      - name: "Generate PR Issue Badge"
        uses: emibcn/badge-action@v1
        with:
          label: "‚§´ PR Issues"
          status: ${{ needs.GitCounts.outputs.issues }}
          color: red
          path: .github/badges/pr_issue_count.svg

      - name: "Generate Lines of Code Badge"
        uses: emibcn/badge-action@v1
        with:
          label: "üñã Lines of Code"
          status: ${{ needs.GitCounts.outputs.lines }}
          color: blue
          path: .github/badges/lines_of_code.svg

      - name: "Generate Warnings Badge"
        uses: emibcn/badge-action@v1
        with:
          label: "üè≤ Warnings"
          status: ${{ steps.calcs.outputs.total-warnings }}
          color: yellow
          path: .github/badges/warnings_count.svg

      - name: "Generate Error Badge"
        uses: emibcn/badge-action@v1
        with:
          label: "‚ù¢ Errors"
          status: ${{ steps.calcs.outputs.total-errors }}
          color: red
          path: .github/badges/errors_count.svg

      - name: "Generate Lines per PR Badge"
        uses: emibcn/badge-action@v1
        with:
          label: "‚â° Lines per Issue"
          status: ${{ steps.calcs.outputs.lines-per-pr }}
          color: blue
          path: .github/badges/lines_per_pr.svg

      - name: "Generate Grade Percent Badge"
        uses: emibcn/badge-action@v1
        with:
          label: "ùÑé Code Grade"
          status: "${{ steps.calcs.outputs.clean-percent }}%"
          color: ${{
            steps.calcs.outputs.clean-percent > 90 && 'green'              ||
            steps.calcs.outputs.clean-percent > 80 && 'yellow,green'       ||
            steps.calcs.outputs.clean-percent > 70 && 'yellow'             ||
            steps.calcs.outputs.clean-percent > 60 && 'orange,yellow'      ||
            steps.calcs.outputs.clean-percent > 50 && 'orange'             ||
            steps.calcs.outputs.clean-percent > 40 && 'red,orange'         ||
            steps.calcs.outputs.clean-percent > 30 && 'red,red,orange'     ||
            steps.calcs.outputs.clean-percent > 20 && 'red,red,red,orange' ||
            'red' }}
          path: .github/badges/grade_percent.svg

      - name: "Generate Letter Grade Badge"
        uses: emibcn/badge-action@v1
        with:
          label: "üõà Code Grade"
          status: ${{
            steps.calcs.outputs.clean-percent > 90 && 'A+'    ||
            steps.calcs.outputs.clean-percent > 80 && 'A'     ||
            steps.calcs.outputs.clean-percent > 70 && 'B+'    ||
            steps.calcs.outputs.clean-percent > 60 && 'B'     ||
            steps.calcs.outputs.clean-percent > 50 && 'C+'    ||
            steps.calcs.outputs.clean-percent > 40 && 'C'     ||
            steps.calcs.outputs.clean-percent > 30 && 'D'     ||
            steps.calcs.outputs.clean-percent > 20 && 'F'     ||
            'Brain Damage' }}
          color: ${{
            steps.calcs.outputs.clean-percent > 90 && 'green'              ||
            steps.calcs.outputs.clean-percent > 80 && 'yellow,green'       ||
            steps.calcs.outputs.clean-percent > 70 && 'yellow'             ||
            steps.calcs.outputs.clean-percent > 60 && 'orange,yellow'      ||
            steps.calcs.outputs.clean-percent > 50 && 'orange'             ||
            steps.calcs.outputs.clean-percent > 40 && 'red,orange'         ||
            steps.calcs.outputs.clean-percent > 30 && 'red,red,orange'     ||
            steps.calcs.outputs.clean-percent > 20 && 'red,red,red,orange' ||
            'red' }}
          path: .github/badges/grade_letter.svg

      - name: "Generate Reading Level Badge"
        uses: emibcn/badge-action@v1
        with:
          label: "‚öØ Reading Level"
          # This is completely arbitrary
          status: ${{
            steps.GitCounts.outputs.avg-word-length > 600 && 'Collegiate'   ||
            steps.GitCounts.outputs.avg-word-length > 586 && '12th Grade'   ||
            steps.GitCounts.outputs.avg-word-length > 570 && '11th Grade'   ||
            steps.GitCounts.outputs.avg-word-length > 551 && '10th Grade'   ||
            steps.GitCounts.outputs.avg-word-length > 531 && '9th Grade'    ||
            steps.GitCounts.outputs.avg-word-length > 510 && '8th Grade'    ||
            steps.GitCounts.outputs.avg-word-length > 488 && '7th Grade'    ||
            steps.GitCounts.outputs.avg-word-length > 465 && '6th Grade'    ||
            steps.GitCounts.outputs.avg-word-length > 441 && '5th Grade'    ||
            steps.GitCounts.outputs.avg-word-length > 418 && '4th Grade'    ||
            steps.GitCounts.outputs.avg-word-length > 393 && '3rd Grade'    ||
            steps.GitCounts.outputs.avg-word-length > 368 && '2nd Grade'    ||
            steps.GitCounts.outputs.avg-word-length > 343 && '1st Grade'    ||
            steps.GitCounts.outputs.avg-word-length > 318 && '1st Grade'    ||
            'Kindergarten' }}
          color: ${{
            steps.GitCounts.outputs.avg-word-length > 600 && 'blue'                     ||
            steps.GitCounts.outputs.avg-word-length > 586 && 'green,blue'               ||
            steps.GitCounts.outputs.avg-word-length > 570 && 'green,green,blue'         ||
            steps.GitCounts.outputs.avg-word-length > 551 && 'green,green,green,blue'   ||
            steps.GitCounts.outputs.avg-word-length > 531 && 'green'                    ||
            steps.GitCounts.outputs.avg-word-length > 510 && 'yellow,green'             ||
            steps.GitCounts.outputs.avg-word-length > 488 && 'yellow,yellow,green'      ||
            steps.GitCounts.outputs.avg-word-length > 465 && 'yellow'                   ||
            steps.GitCounts.outputs.avg-word-length > 441 && 'orange,yellow'            ||
            steps.GitCounts.outputs.avg-word-length > 418 && 'orange,orange,yellow'     ||
            steps.GitCounts.outputs.avg-word-length > 393 && 'orange'                   ||
            steps.GitCounts.outputs.avg-word-length > 368 && 'red,orange'               ||
            steps.GitCounts.outputs.avg-word-length > 343 && 'red,red,orange'           ||
            steps.GitCounts.outputs.avg-word-length > 318 && 'red,red,red,orange'       ||
            'red' }}
      - name: "Generate DRY Score Badge"
        uses: emibcn/badge-action@v1
        with:
          label: "üú≤ Variable Score"
          # This is completely arbitrary
          status: ${{
            steps.calcs.outputs.dry-score > 90 && '????'      ||
            steps.calcs.outputs.dry-score > 50 && 'Godly'     ||
            steps.calcs.outputs.dry-score > 40 && 'Insane'    ||
            steps.calcs.outputs.dry-score > 25 && 'Great'     ||
            steps.calcs.outputs.dry-score > 15 && 'Good'      ||
            steps.calcs.outputs.dry-score > 10 && 'Decent'    ||
            steps.calcs.outputs.dry-score > 7 && 'Fair'       ||
            steps.calcs.outputs.dry-score > 3  && 'Poor'      ||
            "What's a variable?" }}
          color: ${{
            steps.calcs.outputs.dry-score > 90 && 'purple'            ||
            steps.calcs.outputs.dry-score > 50 && 'yellow,orange'     ||
            steps.calcs.outputs.dry-score > 40 && 'green'             ||
            steps.calcs.outputs.dry-score > 25 && 'yellow,green'      ||
            steps.calcs.outputs.dry-score > 15 && 'yellow'            ||
            steps.calcs.outputs.dry-score > 10 && 'orange'            ||
            steps.calcs.outputs.dry-score > 7  && 'red,orange'        ||
            steps.calcs.outputs.dry-score > 3  && 'red'               ||
            'black,red' }}

      - name: push
        uses: actions-x/commit@v2
        with:
          message: "Update Badges"
          email: actions@github.com
          name: GitHub Actions

  CommentBadges:
    # TODO: finish https://github.com/emibcn/pywisp/blob/master/.github/workflows/test.yml#L178
    name: Comment on PR with generated badge
    needs: [GenBadges]
    if: ${{ github.event_name == 'pull_request' && github.actor == github.repository_owner }}

    runs-on: ubuntu-latest

    steps:
      - name: Generate comment file with all the badges
        shell: bash
        env:
          BADGE: ${{ needs.badge.outputs.markdown }}
        run: |
          echo "Badge: ${BADGE}"
          echo "${BADGE}" > output.md

      - name: Comment PR with test coverage badge
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: output.md
